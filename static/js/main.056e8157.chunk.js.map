{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initValues","monday","tuesday","wednesday","thursday","friday","DayCol","props","Col","className","Form","Label","name","Control","as","row","value","onChange","style","AboutModal","useState","show","setShow","handleClose","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","JSON","parse","localStorage","getItem","App","state","inputValues","lastUpdated","handleChange","bind","handleClick","handleClear","event","this","target","setState","setItem","stringify","Date","clear","Container","Row","_","isEqual","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.056e8157.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash'\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nlet initValues = {\n  monday: \"\",\n  tuesday: \"\",\n  wednesday: \"\",\n  thursday: \"\",\n  friday: \"\"\n}\n\nif (JSON.parse(localStorage.getItem(\"data\"))) {\n  initValues = JSON.parse(localStorage.getItem(\"data\"));\n}\n\nfunction DayCol(props) {\n  return (\n    <Col className=\"px-1 mx-1 rounded border border-secondary\" >\n      <div className=\"bg-dark text-white my-2 rounded\" >\n        <Form.Label className=\"text-capitalize\" >{props.name}</Form.Label>\n      </div>\n      <Form.Control as=\"textarea\" row=\"15\" value={props.value} name={props.name} onChange={props.onChange} style={{ \"min-height\": \"40vh\", \"font-size\": \"small\" }} className=\"mb-1\" />\n    </Col>\n  )\n}\n\nfunction AboutModal() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"outline-primary\" onClick={handleShow} style={{\"width\": \"100%\"}} >\n        About\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>About</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>This folio task was completed by Brian Lee</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputValues: initValues,\n      lastUpdated: JSON.parse(localStorage.getItem(\"lastUpdated\"))\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n  }\n\n  handleChange(event) {\n    let inputValues = this.state.inputValues;\n\n    inputValues[event.target.name] = event.target.value;\n\n    this.setState({\n      inputValues: inputValues\n    })\n  }\n\n  handleClick() {\n    localStorage.setItem(\"data\", JSON.stringify(this.state.inputValues));\n    localStorage.setItem(\"lastUpdated\", JSON.stringify(new Date()))\n    this.setState({\n      lastUpdated: new Date()\n    });\n  }\n\n  handleClear() {\n    localStorage.clear();\n    this.setState({\n      inputValues: {\n        monday: \"\",\n        tuesday: \"\",\n        wednesday: \"\",\n        thursday: \"\",\n        friday: \"\"\n      },\n      lastUpdated: null\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row className=\"mb-4\">\n            <Col>\n              <h2>My Timetable</h2>\n            </Col>\n          </Row>\n          <Row>\n            <DayCol name=\"monday\" value={this.state.inputValues.monday} onChange={this.handleChange} />\n            <DayCol name=\"tuesday\" value={this.state.inputValues.tuesday} onChange={this.handleChange} />\n            <DayCol name=\"wednesday\" value={this.state.inputValues.wednesday} onChange={this.handleChange} />\n            <DayCol name=\"thursday\" value={this.state.inputValues.thursday} onChange={this.handleChange} />\n            <DayCol name=\"friday\" value={this.state.inputValues.friday} onChange={this.handleChange} />\n          </Row>\n          <Row className=\"my-3\">\n            <Col>\n              <AboutModal />\n            </Col>\n            <Col></Col>\n            <Col></Col>\n            <Col>\n              <Button variant=\"outline-primary\" style={{\"width\": \"100%\"}} onClick={this.handleClear}>Reset and Clear Saved</Button>\n            </Col>\n            <Col>\n              { _.isEqual(this.state.inputValues, JSON.parse(localStorage.getItem(\"data\"))) ?\n              <Button variant=\"outline-primary\" style={{\"width\": \"100%\"}} onClick={this.handleClick} disabled>Save</Button> :\n              <Button variant=\"primary\" style={{\"width\": \"100%\"}} onClick={this.handleClick}>Save</Button>\n              }\n              \n              <p className=\"text-left\" style={{\"font-size\": \"0.6rem\"}}>{ localStorage.getItem(\"lastUpdated\") ? \n                `Last saved: ${JSON.parse(localStorage.getItem(\"lastUpdated\"))}` :\n                \"Nothing saved yet\" \n              }</p>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}